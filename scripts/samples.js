window.samples = {
  "coffee": [
    "mood = greatlyImproved if singing\n\nif happy and knowsIt\n  clapsHands()\n  chaChaCha()\nelse\n  showIt()\n\ndate = if friday then sue else jill\n\noptions or= defaults\n", 
    "# In JavaScript, the this keyword is dynamically scoped to mean the object that\n# the current function is attached to. If you pass a function as a callback or\n# attach it to a different object, the original value of this will be lost. If\n# you're not familiar with this behavior, this Digital Web article gives a good\n# overview of the quirks.\n\n#The fat arrow => can be used to both define a function, and to bind it to the\n#current value of this, right on the spot. This is helpful when using\n#callback-based libraries like Prototype or jQuery, for creating iterator\n#functions to pass to each, or event-handler functions to use with bind.\n#    Functions created with the fat arrow are able to access properties of the\n#    this where they're defined.\n\nAccount = (customer, cart) ->\n  @customer = customer\n  @cart = cart\n\n  $('.shopping_cart').bind 'click', (event) =>\n    @customer.purchase @cart\n\n\n# If we had used -> in the callback above, @customer would have referred to the\n# undefined \"customer\" property of the DOM element, and trying to call\n# purchase() on it would have raised an exception.\n#\n#\n", 
    "# Objekte und Arrays k\u00f6nnen wie in Javascript erstellt werden\nsong = [\"do\", \"re\", \"mi\", \"fa\", \"so\"]\n\nsingers = {Jagger: \"Rock\", Elvis: \"Roll\"}\n\n\n# Zus\u00e4tzlich ist eine an YAML angelehnte Notation m\u00f6glich, bei welcher\n# Einr\u00fcckung anstatt Klammern verwendet wird, die Kommas am Zeilenende\n# sind optional\nbitlist = [\n  1, 0, 1\n  0, 0, 1\n  1, 1, 0\n]\n\nkids =\n  brother:\n    name: \"Max\"\n    age:  11\n  sister:\n    name: \"Ida\"\n    age:  9\n\n", 
    "# Assignment:\nnumber   = 42\nopposite = true\n\n# Conditions:\nnumber = -42 if opposite\n\n# Functions:\nsquare = (x) -> x * x\n\n# Arrays:\nlist = [1, 2, 3, 4, 5]\n\n# Objects:\nmath =\n  root:   Math.sqrt\n  square: square\n  cube:   (x) -> x * square x\n\n# Splats:\nrace = (winner, runners...) ->\n  print winner, runners\n\n# Existence:\nalert \"I knew it!\" if elvis?\n\n# Array comprehensions:\ncubes = (math.cube num for num in list)\n", 
    "grade = (student) ->\n  if student.excellentWork\n    \"A+\"\n  else if student.okayStuff\n    if student.triedHard then \"B\" else \"B-\"\n  else\n    \"C\"\n\neldest = if 24 > 21 then \"Liz\" else \"Ike\"\n", 
    "class Animal\n  constructor: (@name) ->\n\n  move: (meters) ->\n    alert @name + \" moved #{meters}m.\"\n\nclass Snake extends Animal\n  move: ->\n    alert \"Slithering...\"\n    super 5\n\nclass Horse extends Animal\n  move: ->\n    alert \"Galloping...\"\n    super 45\n\nsam = new Snake \"Sammy the Python\"\ntom = new Horse \"Tommy the Palomino\"\n\nsam.move()\ntom.move()\n", 
    "# Der CoffeeScript Compiler sorgt daf\u00fcr das Variablen immer im richtigen Scope\n# definiert werden. Man braucht nicht mehr von Hand var hinzuf\u00fcgen\nouter = 1\nchangeNumbers = ->\n  inner = -1\n  outer = 10\ninner = changeNumbers()\n", 
    "# CoffeeScript interpoliert in Strings mit doppelten Anf\u00fchrungszeichen wie\n# Ruby die Werte in #{..}, Strings in einfachen Anf\u00fchrungszeichen werden nicht ersetzt\n\nname = \"Peter\"\nmsg1 = \"hello #{name}\"\nmsg2 = 'hello #{name}'\n\nalert msg1\nalert msg2\n\n# Mehrzeilige Strings sind erlaubt\nmobyDick = \"Call me Ishmael. Some years ago --\n never mind how long precisely -- having little\n or no money in my purse, and nothing particular\n to interest me on shore, I thought I would sail\n about a little and see the watery part of the\n world...\"\n\n", 
    "# Funktionen werden mit einer optionalen Liste von Parametern in Klammern\n# einem Pfeil und nachfolgend dem Funktionsk\u00f6rper definiert\nsquare = (x) -> x * x\ncube   = (x) -> square(x) * x\n\n# Funktionen k\u00f6nnen Default Argumente definieren\nfill = (container, liquid = \"coffee\") ->\n  \"Filling the #{container} with #{liquid}...\"\n\n\n# Mit Hilfe von ... Splats kann eine Funktion eine variable Anzahl von\n# Argumenten entgegen nehmen\ngold = silver = rest = \"unknown\"\n\nawardMedals = (first, second, others...) ->\n  gold   = first\n  silver = second\n  rest   = others\n\ncontenders = [\n  \"Michael Phelps\"\n  \"Liu Xiang\"\n  \"Yao Ming\"\n  \"Allyson Felix\"\n  \"Shawn Johnson\"\n  \"Roman Sebrle\"\n  \"Guo Jingjing\"\n  \"Tyson Gay\"\n  \"Asafa Powell\"\n  \"Usain Bolt\"\n]\n\nawardMedals contenders...\n\nalert \"Gold: \" + gold\nalert \"Silver: \" + silver\nalert \"The Field: \" + rest\n"
  ], 
  "js": [
    "(function() {\n  var date, mood;\n  if (singing) {\n    mood = greatlyImproved;\n  }\n  if (happy && knowsIt) {\n    clapsHands();\n    chaChaCha();\n  } else {\n    showIt();\n  }\n  date = friday ? sue : jill;\n  options || (options = defaults);\n}).call(this);\n", 
    "(function() {\n  var Account;\n  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n  Account = function(customer, cart) {\n    this.customer = customer;\n    this.cart = cart;\n    return $('.shopping_cart').bind('click', __bind(function(event) {\n      return this.customer.purchase(this.cart);\n    }, this));\n  };\n}).call(this);\n", 
    "(function() {\n  var bitlist, kids, singers, song;\n  song = [\"do\", \"re\", \"mi\", \"fa\", \"so\"];\n  singers = {\n    Jagger: \"Rock\",\n    Elvis: \"Roll\"\n  };\n  bitlist = [1, 0, 1, 0, 0, 1, 1, 1, 0];\n  kids = {\n    brother: {\n      name: \"Max\",\n      age: 11\n    },\n    sister: {\n      name: \"Ida\",\n      age: 9\n    }\n  };\n}).call(this);\n", 
    "(function() {\n  var cubes, list, math, num, number, opposite, race, square;\n  var __slice = Array.prototype.slice;\n  number = 42;\n  opposite = true;\n  if (opposite) {\n    number = -42;\n  }\n  square = function(x) {\n    return x * x;\n  };\n  list = [1, 2, 3, 4, 5];\n  math = {\n    root: Math.sqrt,\n    square: square,\n    cube: function(x) {\n      return x * square(x);\n    }\n  };\n  race = function() {\n    var runners, winner;\n    winner = arguments[0], runners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    return print(winner, runners);\n  };\n  if (typeof elvis !== \"undefined\" && elvis !== null) {\n    alert(\"I knew it!\");\n  }\n  cubes = (function() {\n    var _i, _len, _results;\n    _results = [];\n    for (_i = 0, _len = list.length; _i < _len; _i++) {\n      num = list[_i];\n      _results.push(math.cube(num));\n    }\n    return _results;\n  })();\n}).call(this);\n", 
    "(function() {\n  var eldest, grade;\n  grade = function(student) {\n    if (student.excellentWork) {\n      return \"A+\";\n    } else if (student.okayStuff) {\n      if (student.triedHard) {\n        return \"B\";\n      } else {\n        return \"B-\";\n      }\n    } else {\n      return \"C\";\n    }\n  };\n  eldest = 24 > 21 ? \"Liz\" : \"Ike\";\n}).call(this);\n", 
    "(function() {\n  var Animal, Horse, Snake, sam, tom;\n  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n  };\n  Animal = (function() {\n    function Animal(name) {\n      this.name = name;\n    }\n    Animal.prototype.move = function(meters) {\n      return alert(this.name + (\" moved \" + meters + \"m.\"));\n    };\n    return Animal;\n  })();\n  Snake = (function() {\n    __extends(Snake, Animal);\n    function Snake() {\n      Snake.__super__.constructor.apply(this, arguments);\n    }\n    Snake.prototype.move = function() {\n      alert(\"Slithering...\");\n      return Snake.__super__.move.call(this, 5);\n    };\n    return Snake;\n  })();\n  Horse = (function() {\n    __extends(Horse, Animal);\n    function Horse() {\n      Horse.__super__.constructor.apply(this, arguments);\n    }\n    Horse.prototype.move = function() {\n      alert(\"Galloping...\");\n      return Horse.__super__.move.call(this, 45);\n    };\n    return Horse;\n  })();\n  sam = new Snake(\"Sammy the Python\");\n  tom = new Horse(\"Tommy the Palomino\");\n  sam.move();\n  tom.move();\n}).call(this);\n", 
    "(function() {\n  var changeNumbers, inner, outer;\n  outer = 1;\n  changeNumbers = function() {\n    var inner;\n    inner = -1;\n    return outer = 10;\n  };\n  inner = changeNumbers();\n}).call(this);\n", 
    "(function() {\n  var mobyDick, msg1, msg2, name;\n  name = \"Peter\";\n  msg1 = \"hello \" + name;\n  msg2 = 'hello #{name}';\n  alert(msg1);\n  alert(msg2);\n  mobyDick = \"Call me Ishmael. Some years ago -- never mind how long precisely -- having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world...\";\n}).call(this);\n", 
    "(function() {\n  var awardMedals, contenders, cube, fill, gold, rest, silver, square;\n  var __slice = Array.prototype.slice;\n  square = function(x) {\n    return x * x;\n  };\n  cube = function(x) {\n    return square(x) * x;\n  };\n  fill = function(container, liquid) {\n    if (liquid == null) {\n      liquid = \"coffee\";\n    }\n    return \"Filling the \" + container + \" with \" + liquid + \"...\";\n  };\n  gold = silver = rest = \"unknown\";\n  awardMedals = function() {\n    var first, others, second;\n    first = arguments[0], second = arguments[1], others = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\n    gold = first;\n    silver = second;\n    return rest = others;\n  };\n  contenders = [\"Michael Phelps\", \"Liu Xiang\", \"Yao Ming\", \"Allyson Felix\", \"Shawn Johnson\", \"Roman Sebrle\", \"Guo Jingjing\", \"Tyson Gay\", \"Asafa Powell\", \"Usain Bolt\"];\n  awardMedals.apply(null, contenders);\n  alert(\"Gold: \" + gold);\n  alert(\"Silver: \" + silver);\n  alert(\"The Field: \" + rest);\n}).call(this);\n"
  ]
}